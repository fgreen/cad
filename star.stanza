#include("geom-lslib.lstanza")
#include("jitbot.stanza")
;; #link("cad.a")
;; #link("-lgeode")
;; #link("-framework GLUT -framework OpenGL")

val pi = 3.1415

defn star (n:Int, rmin:Float, rmax:Float) -> Polygon :
  val points = generate<V2d> :
    for i in 0 to 2 * n do :
      val a = (2.0 * pi * to-float(i)) / (2.0 * to-float(n))
      val r = if i % 2 == 0 : rmax else : rmin
      yield(vec(r * cos(a), r * sin(a)))
  polygon(points)
 
defn dice (mesh:Mesh, n:Int) :
  val bb = bbox(mesh)
  val lo = z(min(bb))
  val dz = z(max(bb)) - lo
  val sh = dz / to-float(n)
  var res = none3()
  println-all(["DZ " dz " LO " lo " SH " sh])
  for i in 0 to n do :
    val off = lo + ((0.5 + to-float(i)) * sh)
    println-all(["I " i " OFF " off])
    val sl  = slice(num(off), mesh)
    println-all(["SLICED " i])
    save(str(string-join(["slice" i ".svg"])), sl)
    val we  = extrude(num(sh * 1.001), sl)
    println-all(["EXTRUDED " i])
    save(str(string-join(["slice" i ".stl"])), we)
    res = res | zmov(num(off), we)
    println-all(["UNION " i])
    save(str(string-join(["slices" i ".stl"])), res)
  res

defstruct Transformation :
  mov: V3d
  rot: V3d

defn assemble-chair (polygons:Streamable<Polygon>, transformations:Streamable<Transformation>, thickness:Float) :
  var res = none3()
  for (i in 0 to false, polygon in polygons, trans in transformations) do :
    val part = extrude(num(thickness), polygon)
    save(str(string-join(["orig-part" i ".stl"])), part)
    ;; println-all(["TRANS MOV " mov(trans) " ROT " rot(trans)])
    val tran-part = mov(mov(trans), rot(rot(trans), part))
    save(str(string-join(["tran-part" i ".stl"])), tran-part)
    res = res | tran-part
    save(str(string-join(["parts" i ".stl"])), res)
  res

;; defn seat-transformations (t:Float) :
;;   [Transformation(vec(0.0,0.0,5.0 - t), vec( 00.0, 00.0, 0.0)),
;;    Transformation(vec(t,  0.0,3.5),     vec( 00.0,-90.0, 0.0)),
;;    Transformation(vec(0.0,  t,0.0),     vec( 90.0, 00.0, 0.0)),
;;    Transformation(vec(0.0,5.0,0.0),     vec( 90.0, 00.0, 0.0))]
;; 
;; defn seat-polygons () :
;;   val seat = polygon([vec(0.0,0.0),vec(5.0,0.0),vec(5.0,5.0),vec(0.0,5.0)])
;;   val back = polygon([vec(0.0,0.0),vec(8.5,0.0),vec(8.5,5.0),vec(0.0,5.0)])
;;   val side_a = polygon(
;;     [vec(0.0,0.0),vec(1.0,0.0),vec(1.0,3.5),vec(4.0,3.5),
;;      vec(4.0,0.0),vec(5.0,0.0),vec(5.0,5.0),vec(0.0,5.0)])
;;   val side_b = polygon(
;;     [vec(0.0,0.0),vec(1.0,0.0),vec(1.0,3.5),vec(4.0,3.5),
;;      vec(4.0,0.0),vec(5.0,0.0),vec(5.0,5.0),vec(0.0,5.0)])
;;   [seat, back, side_a, side_b]

defn seat-transformations (t:Float) :
  [Transformation(vec( 0.0, 0.0,0.0), vec( 00.0, 00.0, 0.0)), ;; seat
   Transformation(vec(-5.0, 0.0,5.0), vec( 00.0,-90.0, 0.0)), ;; back
   Transformation(vec( 0.0, 5.0,0.0), vec( 90.0, 00.0, 0.0)),
   Transformation(vec( 0.0,-5.0,0.0), vec( 90.0, 00.0, 0.0))]

defn seat-polygons () :
  val seat = square(num(5.0))
  val back = square(num(5.0))
  val side = thicken(num(1.5), polyline2([[vec(-5.0,-10.0), vec(-5.0,10.0)],[vec(-5.0,0.0),vec(5.0,0.0),vec(5.0,-10.0)]]))
  [seat, back, side, side]

defn edge-connector (len:Float, inner:Float, outer:Float, p0:V3d, p1:V3d) -> Mesh :
  val shape = extrude(num(len), square(num(outer)))
  val hole  = extrude(num(len + 0.1), square(num(inner)))
  val v     = p1 - p0
  val nv    = normalize(v)
  val end   = num(len) * nv
  val conn  = mov(num(0.5) * end, rot(vec(0.0,0.0,1.0), nv, shape - hole))
  conn

defn fat-vertex (len:Float, inner:Float, outer:Float, base:V3d, nbrs:Streamable<V3d>) -> Mesh :
  reduce(bit-or, none3(), stream(edge-connector{len, inner, outer, base, _}, nbrs))

defn all-fat-vertices (len:Float, inner:Float, outer:Float, pts:List<V3d>) :
  generate<Mesh> :
    for i in 0 to length(pts) do :
      val pt = pts[i]
      val nbrs = generate<V3d> :
        for j in 0 to length(pts) do :
          if j != i :
            yield(pts[j])
      yield(mov(pt, fat-vertex(len, inner, outer, pt, nbrs)))


;;  val points = points(mesh)
;;  val faces  = edges(mesh)
  

println(num(1.0))
println(vec(1.0, 2.0))
println(arrayV2d([vec(-1.0,-1.0)]))
save(str("c1.stl"), edge-connector(4.0, 0.1, 0.5, vec(0.0,0.0,0.0), vec(8.0, 0.0, 0.0)))
save(str("c2.stl"), edge-connector(4.0, 0.1, 0.5, vec(4.0,0.0,0.0), vec(12.0, 0.0, 0.0)))
save(str("c3.stl"), fat-vertex(2.0, 0.1, 0.5, vec(-4.0,-4.0,0.0), [vec(0.0, 0.0, 4.0), vec(4.0, -4.0, 0.0), vec(0.0, 4.0, 0.0)]))
defn tri-points (l:Float) :
  val d = 1.0 / sqrt(2.0)
  to-list([vec(neg(l),0.0,neg(l) * d),vec(l,0.0,neg(l) * d),vec(0.0,neg(l),l * d),vec(0.0,l,l * d)])
val tri-verts = all-fat-vertices(10.0, 1.5, 3.0, tri-points(30.0))
save(str("tri-verts.stl"), reduce(bit-or, none3(), tri-verts))
;; val cube-points = to-list([vec(-4.0,-4.0,-4.0),vec(-4.0, 4.0,-4.0),vec( 4.0,-4.0,-4.0),vec( 4.0, 4.0,-4.0), vec(-4.0,-4.0, 4.0),vec(-4.0, 4.0, 4.0),vec( 4.0,-4.0, 4.0),vec( 4.0, 4.0, 4.0)])
;; val cube-verts = all-fat-vertices(2.0, 0.1, 0.5, cube-points)
;; save(str("cube-verts.stl"), reduce(bit-or, none3(), cube-verts))

;; save(str("chair.stl"), assemble-chair(seat-polygons(), seat-transformations(1.0), 1.5))
;; save(str("slices.stl"), dice(cube(num(5.0)), 13))
;; save(str("slices.stl"), dice(taper(num(10.0),num(5.0),num(1.0),circle(num(1.0))), 13))
save(str("slices.stl"), dice(sphere(num(8.0)), 13))
;; save(str("slices.stl"), dice(load(str("fat-bear.stl")), 13))
;; pprint(arrayV2d([vec(-1.0,-1.0),vec(0.0,1.0),vec(1.0,-1.0)]))
;; pprint(arrayV3d([vec(-1.0,-1.0,-1.0),vec(0.0,1.0,0.0),vec(1.0,-1.0,1.0)]))
;; pprint(arrayV3i([vec(-1,-1,-1),vec(0,1,1),vec(1,-1,0)]))
;; println(polygon([vec(-1.0,-1.0),vec(0.0,1.0),vec(1.0,-1.0)]))
;; pprint(polygon([[vec(-1.0,-1.0),vec(0.0,1.0),vec(1.0,-1.0)]]))
;; pprint(mesh([vec(-1.0,-1.0,-1.0), vec(-1.0,-1.0,1.0), vec(-1.0,1.0,-1.0), vec(-1.0,1.0,1.0), vec(1.0,-1.0,-1.0), vec(1.0,-1.0,1.0), vec(1.0,1.0,-1.0), vec(1.0,1.0,1.0)], [vec(0,1,2), vec(2,1,3), vec(1,0,5), vec(5,0,4), vec(3,1,7), vec(7,1,5), vec(0,2,4), vec(4,2,6), vec(2,3,6), vec(6,3,7), vec(5,6,7), vec(6,5,4)]))
println(cube(num(4.0)))
println(bbox(cube(num(4.0))))
println(square(num(1.0)) | circle(num(1.5)))
;; println(extrude(num(16.0),square(num(2.0)) - square(num(1.0))))
println(extrude(num(10.0), star(7, 3.0, 5.0) - circle(num(2.0))))
save(str("abc.stl"), extrude(num(10.0), star(7, 3.0, 5.0) - circle(num(2.0))))

